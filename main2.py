import vk_api
import config
import logging

import aiohttp
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor
from aiogram.types import CallbackQuery
from aiogram.types import InputMediaPhoto

import os
import pandas as pd
import textwrap
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

from courses import courses

course1 = [
  types.InlineKeyboardButton(text=group, callback_data=group)
  for group in courses["1 –∫—É—Ä—Å"]
]
course2 = [
  types.InlineKeyboardButton(text=group, callback_data=group)
  for group in courses["2 –∫—É—Ä—Å"]
]
course3 = [
  types.InlineKeyboardButton(text=group, callback_data=group)
  for group in courses["3 –∫—É—Ä—Å"]
]
course4 = [
  types.InlineKeyboardButton(text=group, callback_data=group)
  for group in courses["4 –∫—É—Ä—Å"]
]

TGTOKEN = config.settings["TGTOKEN"]
VKTOKEN = config.settings["VKTOKEN"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–ö-–∞–ø–∏
vk_session = vk_api.VkApi(token=VKTOKEN)
vk = vk_session.get_api()
group_id = config.settings["GROUP_ID"]
topic_id = config.settings["TOPIC_ID"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
bot = Bot(token=TGTOKEN)
dp = Dispatcher(bot)

users = []
autoposting_statuses = {}
feedback_enabled = False

# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
handler = logging.FileHandler('log.txt', encoding='utf-8')
handler.setLevel(logging.INFO)
# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(
  '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
# –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –ª–æ–≥–≥–µ—Ä
logger.addHandler(handler)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
  user_id = message.from_user.id
  users.append(user_id)
  autoposting_statuses[user_id] = False
  start_buttons = ["–ù–∞—á–∞—Ç—å"]
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  markup.add(*start_buttons)
  logger.info(
    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (id={user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
  await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç –ü–†–ö.',
                      reply_markup=markup)


@dp.message_handler(commands=['feedback'])
async def handle_feedback_command(message: types.Message):
  global feedback_enabled
  if not feedback_enabled:
    feedback_enabled = True
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:')
  else:
    await message.reply('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


@dp.message_handler(filters.Regexp('^–ù–∞—á–∞—Ç—å'))
async def student_command(message: types.Message):
  stud_buttons = [
    "–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", "–ü–æ–º–æ—â—å",
    "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö", "–ì—Ä–∞—Ñ–∏–∫–∏ —É—á.–ø—Ä–æ—Ü–µ—Å—Å–∞",
    "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –í–ö–†", "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"
  ]
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  markup.add(*stud_buttons)
  await message.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. \n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–º–æ—â—å.',
    reply_markup=markup)


@dp.message_handler(filters.Regexp('^–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'))
async def docs_command(message: types.Message):
  docs_text = "https://forms.office.com/Pages/ResponsePage.aspx?id=GkRvy7iA_ky0GECEIL4hdYn2GbOUROZJn7z-vE97vYJUOFA3R1JLOFQxS1RERk1EUzAwMlkyUFNXUCQlQCN0PWcu&embed=true"
  await bot.send_message(message.chat.id, docs_text)


@dp.message_handler(filters.Regexp('^–ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π'))
async def consultation(message: types.Message):
  with open('/home/runner/prc-news/prc_news/res/graphic.jpg', 'rb') as photo:
    await bot.send_photo(message.chat.id, photo)


@dp.message_handler(filters.Regexp('^–ì—Ä–∞—Ñ–∏–∫–∏ —É—á.–ø—Ä–æ—Ü–µ—Å—Å–∞'))
async def learn_process(message: types.Message):
  files = [
    '/home/runner/prc-news/prc_news/res/–£—á. –ü—Ä–æ—Ü–µ—Å—Å/–£—á. –ø—Ä–æ—Ü–µ—Å—Å (–æ—á–Ω–æ–µ).pdf',
    '/home/runner/prc-news/prc_news/res/–£—á. –ü—Ä–æ—Ü–µ—Å—Å/–£—á.–ø—Ä–æ—Ü–µ—Å—Å (–æ—á–Ω–æ-–∑–∞–æ—á–Ω–æ–µ).pdf',
    '/home/runner/prc-news/prc_news/res/–£—á. –ü—Ä–æ—Ü–µ—Å—Å/–£—á.–ø—Ä–æ—Ü–µ—Å—Å (–∑–∞–æ—á–Ω–æ–µ).pdf'
  ]  # —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

  media = [types.InputMediaDocument(types.InputFile(file))
           for file in files]  # —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤

  await bot.send_media_group(message.chat.id,
                             media=media)  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤


@dp.message_handler(filters.Regexp('^–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –í–ö–†'))
async def vkr(message: types.Message):
  files = [
    '/home/runner/prc-news/prc_news/res/–í–ö–†/–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ –í–ö–†.pdf',
    '/home/runner/prc-news/prc_news/res/–í–ö–†/–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å 2023.pdf',
    '/home/runner/prc-news/prc_news/res/–í–ö–†/–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –í–ö–†.pdf',
    '/home/runner/prc-news/prc_news/res/–í–ö–†/–†–∞–º–∫–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.pdf',
    '/home/runner/prc-news/prc_news/res/–í–ö–†/–†–∞–º–∫–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã.pdf'
  ]
  media = [types.InputMediaDocument(types.InputFile(file)) for file in files]

  await bot.send_media_group(message.chat.id,
                             media=media)  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤


@dp.message_handler(filters.Regexp('^–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞'))
async def referat(message: types.Message):
  files = [
    '/home/runner/prc-news/prc_news/res/–†–µ—Ñ–µ—Ä–∞—Ç/–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–µ—Ñ–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.pdf',
    '/home/runner/prc-news/prc_news/res/–†–µ—Ñ–µ—Ä–∞—Ç/–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å. –ù–æ–≤—ã–π –†–µ—Ñ–µ—Ä–∞—Ç.pdf',
    '/home/runner/prc-news/prc_news/res/–†–µ—Ñ–µ—Ä–∞—Ç/–ü—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞. –ù–æ–≤—ã–π.pdf'
  ]
  media = [types.InputMediaDocument(types.InputFile(file)) for file in files]

  await bot.send_media_group(message.chat.id,
                             media=media)  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤


@dp.message_handler(filters.Regexp('^–ü–æ–º–æ—â—å'))
async def help_command(message: types.Message):
  help_text = (
    f"ü§ñ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ß–ê–¢-–ë–û–¢–ê: ü§ñ\n\n"
    f"‚ùó –ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É ‚ùó\n"
    f"-- –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏.\n\n"
    f"‚ùó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚ùó\n"
    f"-- –≤—ã—à–ª–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é, –ø–æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ. \n\n"
    f"‚ùó –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ‚ùó\n"
    f"-- –≤—ã—à–ª–µ—Ç —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 2022-23 –≥–æ–¥. \n\n "
    f"‚ùó –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö ‚ùó\n"
    f"-- –í–∫–ª—é—á–∏—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã –ü–†–ö –≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ. \n\n"
    f"‚ùó –ì—Ä–∞—Ñ–∏–∫–∏ —É—á.–ø—Ä–æ—Ü–µ—Å—Å–∞ ‚ùó\n"
    f"-- –≤—ã—à–ª–µ—Ç 3 —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –æ—á–Ω–æ–≥–æ, –æ—á–Ω–æ-–∑–∞–æ—á–Ω–æ–≥–æ –∏ –∑–∞–æ—á–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –Ω–∞ 2022-23 –≥–æ–¥. \n\n "
    f"‚ùó –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –í–ö–† ‚ùó\n"
    f"-- –≤—ã—à–ª–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–ø—É—Å–∫–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã. \n\n "
    f"‚ùó –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ ‚ùó\n"
    f"-- –≤—ã—à–ª–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞. \n\n "
  )

  await bot.send_message(message.chat.id, help_text)


@dp.message_handler(filters.Regexp('^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
async def shedule(message: types.Message):
  keyboard = types.InlineKeyboardMarkup(row_width=2)
  keyboard.add(types.InlineKeyboardButton(text="1 –∫—É—Ä—Å", callback_data="1"),
               types.InlineKeyboardButton(text="2 –∫—É—Ä—Å", callback_data="2"),
               types.InlineKeyboardButton(text="3 –∫—É—Ä—Å", callback_data="3"),
               types.InlineKeyboardButton(text="4 –∫—É—Ä—Å", callback_data="4"))
  await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:", reply_markup=keyboard)


@dp.callback_query_handler(
  lambda callback_query: callback_query.data in ['1', '2', '3', '4'])
async def course(callback_query: types.CallbackQuery):
  course_num = int(callback_query.data)
  keyboard = types.InlineKeyboardMarkup(row_width=3)
  keyboard.add(*globals()[f'course{course_num}'])
  keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
  await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                      callback_query.message.message_id,
                                      reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back'
                           )
async def back(callback_query: types.CallbackQuery):
  keyboard = types.InlineKeyboardMarkup(row_width=2)
  keyboard.add(types.InlineKeyboardButton(text="1 –∫—É—Ä—Å", callback_data="1"),
               types.InlineKeyboardButton(text="2 –∫—É—Ä—Å", callback_data="2"),
               types.InlineKeyboardButton(text="3 –∫—É—Ä—Å", callback_data="3"),
               types.InlineKeyboardButton(text="4 –∫—É—Ä—Å", callback_data="4"))
  await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                      callback_query.message.message_id,
                                      reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: True)
async def group_name_input(callback_query: CallbackQuery):
  df = pd.read_excel('files/file.xlsx', header=None)
  group_name = callback_query.data
  group_column = df.loc[6].eq(group_name).idxmax()

  data = [[], [], [], [], [], []]

  for day, rows in enumerate([(9, 26), (27, 44), (45, 62), (63, 80), (81, 98),
                              (99, 116)]):
    for row in range(rows[0], rows[1] + 1):
      dataday = str(df.loc[row, 0])
      time = str(df.loc[row, 2])
      classroom = str(df.loc[row, group_column + 1])
      subject = str(df.loc[row, group_column])
      if isinstance(subject, float):
        subject = ''

      wrapped_subject = textwrap.fill(subject, width=25).split('\n')

      data[day].append([
        time[:11] if not pd.isnull(time) else '',
        wrapped_subject[0][:25] if wrapped_subject else '',
        classroom[:10] if not pd.isnull(classroom) else ''
      ])
      for line in wrapped_subject[1:]:
        data[day].append(['', line[:25], ''])

  days_of_week = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'
  ]
  dfs = []
  for table_data in data:
    df_day = pd.DataFrame(table_data,
                          columns=['–í—Ä–µ–º—è', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞',
                                   '–ö–∞–±–∏–Ω–µ—Ç']).replace(pd.NA,
                                                       '').replace('nan', '')
    dfs.append(df_day.dropna(how='all'))

  photos = []

  for day, df_day in enumerate(dfs):
    img = Image.new('RGB', (800, 1400), color='white')
    d = ImageDraw.Draw(img)
    d.rectangle([(0, 120), (800, 200)], fill=(106, 147, 176))

    font = ImageFont.truetype('arial.ttf', size=30)

    rows = [(9, 26), (27, 44), (45, 62), (63, 80), (81, 98), (99, 116)][day]
    dataday = str(df.loc[rows[0], 0])

    d.text((300, 10), '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞:', font=font, fill=(0, 0, 0))
    d.text((275, 50), dataday, font=font, fill=(0, 0, 0))

    start_y = 200
    row_height = 40
    d.text((10, start_y - 80), '–í—Ä–µ–º—è', font=font, fill=(0, 0, 0))
    d.text((250, start_y - 80), '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', font=font, fill=(0, 0, 0))
    d.text((650, start_y - 80), '–ö–∞–±–∏–Ω–µ—Ç', font=font, fill=(0, 0, 0))

    d.line([(240, start_y - 80), (240, start_y + len(df_day) * row_height)],
           fill=(0, 0, 0),
           width=2)
    d.line([(640, start_y - 80), (640, start_y + len(df_day) * row_height)],
           fill=(0, 0, 0),
           width=2)

    for i, row in df_day.iterrows():
      if row[0] != '':
        d.line([(0, start_y + i * row_height),
                (800, start_y + i * row_height)],
               fill=(0, 0, 0),
               width=2)

      d.line([(0, start_y - 80), (800, start_y - 80)], fill=(0, 0, 0),
             width=2)  # –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
      d.line([(0, start_y + len(df_day) * row_height),
              (800, start_y + len(df_day) * row_height)],
             fill=(0, 0, 0),
             width=2)  # –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π

      d.text((10, start_y + i * row_height),
             str(row[0]),
             font=font,
             fill=(0, 0, 0))
      d.text((250, start_y + i * row_height),
             str(row[1]),
             font=font,
             fill=(0, 0, 0))
      d.text((650, start_y + i * row_height),
             str(row[2]),
             font=font,
             fill=(0, 0, 0))

    buf = BytesIO()
    img.save(buf, format='jpeg')
    buf.seek(0)

    photos.append(types.InputMediaPhoto(buf, caption=days_of_week[day]))

  await bot.send_message(chat_id=callback_query.message.chat.id,
                         text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:",
                         reply_to_message_id=callback_query.message.message_id)
  await bot.send_media_group(chat_id=callback_query.message.chat.id,
                             media=photos)


@dp.message_handler(filters.Regexp('^–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö'))
async def autopost(message: types.Message):
  user_id = message.from_user.id
  if autoposting_statuses.get(user_id, True):
    autoposting_statuses[user_id] = False
    await message.reply("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω.")
  else:
    autoposting_statuses[user_id] = True
    await message.reply("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω.")


last_news_id = None
last_file_id = None

@dp.message_handler()
async def handle_feedback_message(message: types.Message):
    global feedback_enabled
    if feedback_enabled:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (id={message.from_user.id}) –æ—Å—Ç–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å : "{message.text}"')
        feedback_enabled = False
        await message.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!')

#parser news in group
async def check_new():
    global last_news_id

    while True:
        new_post = vk.wall.get(owner_id=-217559086, count=1)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å

        post_id = new_post['items'][0]['id']
        if post_id == last_news_id:
            await asyncio.sleep(10)
            continue

        last_news_id = post_id
        post_text = new_post['items'][0]['text']
        post_link = f"https://vk.com/perm_college_radio?w=wall-{new_post['items'][0]['owner_id']}_{last_news_id}"
        # post_short_link = vk_session.method('utils.getShortLink', {'url': post_link})['short_url'] 

        media_group = []
        photo_urls = []
        attachments = new_post['items'][0].get('attachments', [])
        for attachment in attachments:
            if attachment['type'] == 'photo':
                photo_url = attachment['photo']['sizes'][-1]['url']
                photo_urls.append(photo_url)
                media_group.append(InputMediaPhoto(photo_url))

        message = f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ –í–ö!\n\n{post_text}\n\n{post_link}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for user_id in users:
            if autoposting_statuses.get(user_id, True):
                if len(media_group) > 0:
                    if len(media_group) > 1:
                        await bot.send_media_group(chat_id=user_id, media=media_group)
                    else:
                        await bot.send_photo(chat_id=user_id, photo=media_group[0].media)
                await bot.send_message(chat_id=user_id, text=message)
        await asyncio.sleep(10) 

#parser tables

async def download_file(url, file_path):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            file_data = await response.read()
            with open(file_path, "wb") as f:
                f.write(file_data)

async def vk_parse():
    global last_file_id

    vk_session = vk_api.VkApi(token=VKTOKEN)
    vk = vk_session.get_api()
    last_comment_id = 0
    if not os.path.exists("files"):
        os.makedirs("files")
    while True:
        response = vk.board.getComments(group_id=group_id, topic_id=topic_id, count=100)
        new_comments = [comment for comment in response["items"] if comment["id"] > last_comment_id]
        if new_comments:
            last_comment = max(new_comments, key=lambda c: c["id"])
            last_comment_id = last_comment["id"]
            if "attachments" in last_comment:
                attachments = last_comment["attachments"]
                doc_attachments = [a for a in attachments if a["type"] == "doc" and a["doc"]["ext"] == "xlsx"]
                if doc_attachments:
                    file_id = doc_attachments[0]["doc"]["id"]
                    if file_id == last_file_id:
                        await asyncio.sleep(10)
                        continue

                    last_file_id = file_id
                    url = doc_attachments[0]["doc"]["url"]
                    title = "file.xlsx"
                    file_path = os.path.join("files", title)
                    await download_file(url, file_path)
                    message = f"–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
                    for user in users:
                        await bot.send_message(chat_id=user, text=message)
                else:
                    print("Last comment without attachments.")
            else:
                print("Last comment without attachments.")
        else:
            print("No new comments.")
        await asyncio.sleep(10)

async def main():
    while True:
        try:
            await asyncio.gather(check_new(), vk_parse())
        except Exception as e:
            print(f"An error occurred: {e}")
            await asyncio.sleep(10)

if __name__ == '__main__':
  asyncio.get_event_loop().create_task(check_new())
  asyncio.get_event_loop().create_task(main())
  executor.start_polling(dp, skip_updates=True)
